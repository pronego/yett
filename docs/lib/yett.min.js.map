{"version":3,"file":"yett.min.js","sources":["../../src/checks.js","../../src/variables.js","../../src/observer.js","../../src/monkey.js","../../src/unblock.js"],"sourcesContent":["import { patterns, TYPE_ATTRIBUTE } from './variables'\n\nexport const isOnBlacklist = (src, type) => (\n    src && (!type || type !== TYPE_ATTRIBUTE) &&\n    isBlacklistedSource(src, false)\n)\n\nexport const isOnBlacklistKey = (src, type) => (\n    src && (!type || type !== TYPE_ATTRIBUTE) &&\n    isBlacklistedSource(src, true)\n)\n\nexport const isBlacklistedSource = function(src, return_key) {\n  const srcStart = (src === undefined || src == null ? \"\" : src.toString().split(\"?\")[0]);\n  let i = null;\n  if (srcStart &&\n  (\n    // No blacklist exists or one matches\n    (!patterns.blacklist || patterns.blacklist.some((pattern, index) => {\n        if (pattern.test(srcStart)) {\n            i = index; // Remember index in blacklist\n            return true;\n        } else {\n            return false;\n        }\n    }))\n\n    // No whitelist or all do not match\n    && (!patterns.whitelist || patterns.whitelist.every(pattern => !pattern.test(srcStart)))\n  )) {\n      return (return_key ? i : true);\n  }\n  else\n      return false;\n}\n\nexport const willBeUnblocked = function(script) {\n    const src = script.getAttribute('src')\n    return (\n        patterns.blacklist && patterns.blacklist.every(entry => !entry.test(src)) ||\n        patterns.whitelist && patterns.whitelist.some(entry => entry.test(src))\n    )\n}\n","export const TYPE_ATTRIBUTE = 'javascript/blocked'\nexport const HIDDEN_SRC_ATTRIBUTE = 'yett-src'\n\nexport const patterns = {\n    blacklist: window.YETT_BLACKLIST,\n    whitelist: window.YETT_WHITELIST,\n    blacklistlabels: window.YETT_BLACKLIST_LABELS || [] // labels for the blacklist elements, same order as in blacklist\n}\n\nexport const features = {\n    iframe: window.YETT_IFRAME,\n    iframe_blocked_text: window.YETT_IFRAME_BLOCKED_TEXT || 'The following content was blocked due to your settings:',\n    iframe_blocked_btn_unblock: window.YETT_IFRAME_BLOCKED_BTN || 'Unblock',\n}\n\n// Backup list containing the original blacklisted elements\nexport const backupElements = {\n    blacklisted: []\n}\n","import {backupElements, TYPE_ATTRIBUTE, features, patterns} from './variables'\nimport { isOnBlacklistKey } from './checks'\n\n// Setup a mutation observer to track DOM insertion\nexport const observer = new MutationObserver(mutations => {\n    for (let i = 0; i < mutations.length; i++) {\n        const { addedNodes } = mutations[i];\n        for(let i = 0; i < addedNodes.length; i++) {\n            const node = addedNodes[i]\n\n            // For each added script or iframe tag; nodeType=1 represents an Element node like <p> or <div>.\n            if(node.nodeType === 1 && (node.tagName === 'SCRIPT' || (features.iframe && node.tagName === 'IFRAME'))) {\n                const src = node.src || node.getAttribute('yett-src')\n                const type = node.type\n\n                // If the src is inside the blacklist and is not inside the whitelist\n                let blacklistIndex = isOnBlacklistKey(src, type);\n                if(blacklistIndex !== null && blacklistIndex !== false) {\n                    // We backup the node\n                    backupElements.blacklisted.push([node, node.type])\n\n                   // Blocks inline script execution in Safari & Chrome\n                   node.type = TYPE_ATTRIBUTE\n\n                    // Firefox has this additional event which prevents scripts from beeing executed\n                    const beforeScriptExecuteListener = function (event) {\n                        // Prevent only marked scripts from executing\n                        if(node.getAttribute('type') === TYPE_ATTRIBUTE)\n                            event.preventDefault()\n                        node.removeEventListener('beforescriptexecute', beforeScriptExecuteListener)\n                    }\n                    node.addEventListener('beforescriptexecute', beforeScriptExecuteListener)\n\n                    // In case of iframe feature, add placeholder block\n                    if (features.iframe && node.tagName === 'IFRAME') {\n                        let label = patterns.blacklistlabels[blacklistIndex] ? '<br/>' + patterns.blacklistlabels[blacklistIndex] : ''\n                        let iframePlaceholder = document.createElement('div')\n                        iframePlaceholder.setAttribute('data-src', src)\n                        // Copy styles from iframe\n                        iframePlaceholder.style.cssText = document.defaultView.getComputedStyle(node, '').cssText\n                        // Set background color + special styles\n                        iframePlaceholder.style.backgroundColor = '#dedede'\n                        iframePlaceholder.style.display = 'flex'\n                        iframePlaceholder.style.alignItems = 'center'\n                        iframePlaceholder.style.justifyContent = 'center'\n                        iframePlaceholder.style.width = node.getAttribute('width')+'px'\n                        iframePlaceholder.style.height = node.getAttribute('height')+'px'\n                        iframePlaceholder.style.maxWidth = '100%'\n                        iframePlaceholder.classList.add('iframe-blocked')\n                        // Add text + Button\n                        iframePlaceholder.innerHTML = '<div style=\"text-align: center\"><p>'+features.iframe_blocked_text+label+'</p>'\n                            + '<p><button onclick=\"yett.unblock(\\''+src+'\\')\">'+features.iframe_blocked_btn_unblock+'</button></p></div>'\n                        node.parentElement && node.parentElement.insertBefore(iframePlaceholder, node)\n                    }\n\n                    // Remove the node from the DOM\n                    node.parentElement && node.parentElement.removeChild(node)\n                }\n            }\n        }\n    }\n})\n\n// Starts the monitoring\nobserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true\n})\n","import { TYPE_ATTRIBUTE, HIDDEN_SRC_ATTRIBUTE } from './variables'\nimport { isOnBlacklist } from './checks'\n\nconst createElementBackup = document.createElement\n\nvar originalDescriptors = {\n    script: {\n      class: HTMLScriptElement,\n      src: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src'),\n      type: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'type')\n    }\n}\n\n// Monkey patch the createElement method to prevent dynamic scripts from executing\ndocument.createElement = function(...args) {\n    // If this is not a patched tag, bypass\n    const tagName = args[0].toLowerCase()\n    const descriptors = originalDescriptors[tagName]\n    if(descriptors === undefined)\n        return createElementBackup.bind(document)(...args)\n\n    const mockElt = createElementBackup.bind(document)(...args)\n\n    // Define getters / setters to ensure that the script type is properly set\n    try {\n        Object.defineProperties(mockElt, {\n            'src': {\n                get() {\n                    return descriptors.src.get.call(this)\n                },\n                set(value) {\n                    if(isOnBlacklist(value, mockElt.type)) {\n                        if (descriptors.type) {\n                          descriptors.type.set.call(this, TYPE_ATTRIBUTE)\n                        } else {\n                          descriptors.class.prototype.setAttribute.call(this, HIDDEN_SRC_ATTRIBUTE, value)\n                          value = undefined\n                        }\n                    }\n\n                    if(value !== undefined)\n                      descriptors.src.set.call(this, value)\n                }\n            },\n            'type': {\n                set(value) {\n                    const typeValue = isOnBlacklist(mockElt.src, mockElt.type) ? TYPE_ATTRIBUTE : value\n                    descriptors.type.set.call(this, typeValue)\n                }\n            }\n        })\n\n        // Monkey patch the setAttribute function so that the setter is called instead\n        mockElt.setAttribute = function(name, value) {\n            if(name === 'type' || name === 'src') {\n                mockElt[name] = value\n            } else\n                descriptors.class.prototype.setAttribute.call(mockElt, name, value)\n        }\n    } catch (error) {\n        // eslint-disable-next-line\n        console.warn(\n            'Yett: unable to prevent script execution for ' + tagName + ' src ', mockElt.src, '.\\n',\n            'A likely cause would be because you are using a third-party browser extension that monkey patches the \"document.createElement\" function.'\n        )\n    }\n    return mockElt\n}\n","import {\n    patterns,\n    backupElements,\n    TYPE_ATTRIBUTE,\n    HIDDEN_SRC_ATTRIBUTE\n} from './variables'\n\nimport {\n    willBeUnblocked\n} from './checks'\n\nimport {\n    observer\n} from './observer'\n\nconst URL_REPLACER_REGEXP = new RegExp('[|\\\\{}()[\\\\]^$+*?.]', 'g')\n\n// Unblocks all (or a selection of) blacklisted scripts.\nexport const unblock = function(...scriptUrlsOrRegexes) {\n    if(scriptUrlsOrRegexes.length < 1) {\n        patterns.blacklist = []\n        patterns.whitelist = []\n    } else {\n        if(patterns.blacklist) {\n            patterns.blacklist = patterns.blacklist.filter(pattern => (\n                scriptUrlsOrRegexes.every(urlOrRegexp => {\n                    if(typeof urlOrRegexp === 'string')\n                        return !pattern.test(urlOrRegexp)\n                    else if(urlOrRegexp instanceof RegExp)\n                        return pattern.toString() !== urlOrRegexp.toString()\n                })\n            ))\n        }\n        if(patterns.whitelist) {\n            patterns.whitelist = [\n                ...patterns.whitelist,\n                ...scriptUrlsOrRegexes\n                    .map(urlOrRegexp => {\n                        if(typeof urlOrRegexp === 'string') {\n                            const escapedUrl = urlOrRegexp.replace(URL_REPLACER_REGEXP, '\\\\$&')\n                            const permissiveRegexp = '.*' + escapedUrl + '.*'\n                            if(patterns.whitelist.every(p => p.toString() !== permissiveRegexp.toString())) {\n                                return new RegExp(permissiveRegexp)\n                            }\n                        } else if(urlOrRegexp instanceof RegExp) {\n                            if(patterns.whitelist.every(p => p.toString() !== urlOrRegexp.toString())) {\n                                return urlOrRegexp\n                            }\n                        }\n                        return null\n                    })\n                    .filter(Boolean)\n            ]\n        }\n    }\n\n\n    // Parse existing tags with a marked type\n    const tags = document.querySelectorAll(`script[type=\"${TYPE_ATTRIBUTE}\"], *[${HIDDEN_SRC_ATTRIBUTE}]`)\n    for(let i = 0; i < tags.length; i++) {\n        const elem = tags[i]\n        if(willBeUnblocked(elem)) {\n            backupElements.blacklisted.push([elem, 'application/javascript'])\n            elem.parentElement.removeChild(elem)\n        }\n    }\n\n    // Exclude 'whitelisted' scripts from the blacklist and append them to <head>\n    let indexOffset = 0;\n    [...backupElements.blacklisted].forEach(([elem, type], index) => {\n        if(willBeUnblocked(elem)) {\n            const tagName = elem.tagName.toLowerCase();\n            const elementNode = document.createElement(tagName)\n            const stashedSrc = elem.getAttribute(HIDDEN_SRC_ATTRIBUTE);\n\n            if (elementNode.tagName != 'IFRAME') {\n                if (stashedSrc) {\n                    //console.log('Unstashing', stashedSrc);\n                    elementNode.setAttribute('src', stashedSrc)\n                } else {\n                    //console.log('resetting', elem.src);\n                    elementNode.setAttribute('type', type || 'application/javascript')\n                    elementNode.setAttribute('src', elem.src)\n                }\n\n                for (let key in elem) {\n                    if (key.startsWith(\"on\")) {\n                        elementNode[key] = elem[key]\n                    }\n                }\n                // insert into head\n                document.head.appendChild(elementNode)\n            }\n\n            // Restore iframe and remove placeholder\n            else {\n                let blockedIframes = document.querySelectorAll('div.iframe-blocked[data-src]')\n                for (let i = 0; i < blockedIframes.length; i++) {\n                    if ( ! elem.src && elem.getAttribute('yett-src')) {\n                        elem.src = elem.getAttribute('yett-src')\n                    }\n                    if (blockedIframes[i].getAttribute('data-src') == elem.src) {\n                        // Insert iframe at placeholder position\n                        blockedIframes[i].parentElement && blockedIframes[i].parentElement.insertBefore(elem, blockedIframes[i])\n                        // Remove placeholder\n                        blockedIframes[i].parentElement && blockedIframes[i].parentElement.removeChild(blockedIframes[i])\n\n                    }\n                }\n            }\n\n            backupElements.blacklisted.splice(index - indexOffset, 1)\n            indexOffset++\n        }\n    })\n\n    // Disconnect the observer if the blacklist is empty for performance reasons\n    if(patterns.blacklist && patterns.blacklist.length < 1) {\n        observer.disconnect()\n    }\n}\n"],"names":["isOnBlacklist","src","type","TYPE_ATTRIBUTE","isBlacklistedSource","willBeUnblocked","script","getAttribute","patterns","blacklist","every","entry","test","whitelist","some","HIDDEN_SRC_ATTRIBUTE","window","YETT_BLACKLIST","YETT_WHITELIST","blacklistlabels","YETT_BLACKLIST_LABELS","features","YETT_IFRAME","YETT_IFRAME_BLOCKED_TEXT","YETT_IFRAME_BLOCKED_BTN","backupElements","blacklisted","return_key","srcStart","undefined","toString","split","i","pattern","index","observer","MutationObserver","mutations","length","addedNodes","node","nodeType","tagName","blacklistIndex","push","addEventListener","beforeScriptExecuteListener","event","preventDefault","removeEventListener","label","iframePlaceholder","document","createElement","setAttribute","style","cssText","defaultView","getComputedStyle","backgroundColor","display","alignItems","justifyContent","width","height","maxWidth","classList","add","innerHTML","parentElement","insertBefore","removeChild","observe","documentElement","childList","subtree","createElementBackup","originalDescriptors","HTMLScriptElement","Object","getOwnPropertyDescriptor","prototype","args","toLowerCase","descriptors","bind","mockElt","defineProperties","get","call","this","set","value","typeValue","name","error","console","warn","URL_REPLACER_REGEXP","RegExp","scriptUrlsOrRegexes","filter","urlOrRegexp","map","permissiveRegexp","replace","p","Boolean","tags","querySelectorAll","elem","indexOffset","forEach","elementNode","stashedSrc","key","startsWith","head","appendChild","blockedIframes","splice","disconnect"],"mappings":"iMAE6B,SAAhBA,EAAiBC,EAAKC,UAC/BD,KAASC,GAAQA,IAASC,IAC1BC,EAAoBH,GAAK,GAgCE,SAAlBI,EAA2BC,OAC9BL,EAAMK,EAAOC,aAAa,cAE5BC,EAASC,WAAaD,EAASC,UAAUC,MAAM,SAAAC,UAAUA,EAAMC,KAAKX,MACpEO,EAASK,WAAaL,EAASK,UAAUC,KAAK,SAAAH,UAASA,EAAMC,KAAKX,KCxCnE,IAAME,EAAiB,qBACjBY,EAAuB,WAEvBP,EAAW,CACpBC,UAAWO,OAAOC,eAClBJ,UAAWG,OAAOE,eAClBC,gBAAiBH,OAAOI,uBAAyB,IAGxCC,EACDL,OAAOM,YADND,EAEYL,OAAOO,0BAA4B,0DAF/CF,EAGmBL,OAAOQ,yBAA2B,UAIrDC,EAAiB,CAC1BC,YAAa,IDLJtB,EAAsB,SAASH,EAAK0B,OACzCC,OAAoBC,IAAR5B,GAA4B,MAAPA,EAAc,GAAKA,EAAI6B,WAAWC,MAAM,KAAK,GAChFC,EAAI,cACJJ,GAGApB,EAASC,YAAaD,EAASC,UAAUK,KAAK,SAACmB,EAASC,WAClDD,EAAQrB,KAAKgB,KACbI,EAAIE,GACG,MAOV1B,EAASK,YAAaL,EAASK,UAAUH,MAAM,SAAAuB,UAAYA,EAAQrB,KAAKgB,SAEnED,GAAaK,IE1BdG,EAAW,IAAIC,iBAAiB,SAAAC,OACpC,IAAIL,EAAI,EAAGA,EAAIK,EAAUC,OAAQN,YAC1BO,EAAeF,EAAUL,GAAzBO,sBACAP,OFAiB/B,EAAKC,EECpBsC,EAAOD,EAAWP,MAGH,IAAlBQ,EAAKC,WAAoC,WAAjBD,EAAKE,SAAyBrB,GAAoC,WAAjBmB,EAAKE,SAAwB,KAC/FzC,EAAMuC,EAAKvC,KAAOuC,EAAKjC,aAAa,YACpCL,EAAOsC,EAAKtC,KAGdyC,GFTkBzC,EESqBA,GFT1BD,EESqBA,MFRzCC,GAAQA,IAASC,IAC1BC,EAAoBH,GAAK,OEQS,OAAnB0C,IAA8C,IAAnBA,EAA0B,CAEpDlB,EAAeC,YAAYkB,KAAK,CAACJ,EAAMA,EAAKtC,OAG7CsC,EAAKtC,KAAOC,KASXqC,EAAKK,iBAAiB,sBANc,SAA9BC,EAAwCC,GAEvCP,EAAKjC,aAAa,UAAYJ,GAC7B4C,EAAMC,iBACVR,EAAKS,oBAAoB,sBAAuBH,KAKhDzB,GAAoC,WAAjBmB,EAAKE,QAAsB,KAC1CQ,EAAQ1C,EAASW,gBAAgBwB,GAAkB,QAAUnC,EAASW,gBAAgBwB,GAAkB,GACxGQ,EAAoBC,SAASC,cAAc,OAC/CF,EAAkBG,aAAa,WAAYrD,GAE3CkD,EAAkBI,MAAMC,QAAUJ,SAASK,YAAYC,iBAAiBlB,EAAM,IAAIgB,QAElFL,EAAkBI,MAAMI,gBAAkB,UAC1CR,EAAkBI,MAAMK,QAAU,OAClCT,EAAkBI,MAAMM,WAAa,SACrCV,EAAkBI,MAAMO,eAAiB,SACzCX,EAAkBI,MAAMQ,MAAQvB,EAAKjC,aAAa,SAAS,KAC3D4C,EAAkBI,MAAMS,OAASxB,EAAKjC,aAAa,UAAU,KAC7D4C,EAAkBI,MAAMU,SAAW,OACnCd,EAAkBe,UAAUC,IAAI,kBAEhChB,EAAkBiB,UAAY,sCAAsC/C,EAA6B6B,EAAM,0CAC3DjD,EAAI,QAAQoB,EAAoC,sBAC5FmB,EAAK6B,eAAiB7B,EAAK6B,cAAcC,aAAanB,EAAmBX,GAI7EA,EAAK6B,eAAiB7B,EAAK6B,cAAcE,YAAY/B,MAjDzDR,EAAI,EAAGA,EAAIO,EAAWD,OAAQN,MAA9BA,KAyDhBG,EAASqC,QAAQpB,SAASqB,gBAAiB,CACvCC,WAAW,EACXC,SAAS,IC/Db,IAAMC,EAAsBxB,SAASC,cAEjCwB,EAAsB,CACtBvE,OAAQ,OACCwE,kBACP7E,IAAK8E,OAAOC,yBAAyBF,kBAAkBG,UAAW,OAClE/E,KAAM6E,OAAOC,yBAAyBF,kBAAkBG,UAAW,+xCAKzE7B,SAASC,cAAgB,sCAAY6B,2BAAAA,sBAE3BxC,EAAUwC,EAAK,GAAGC,cAClBC,EAAcP,EAAoBnC,WACrBb,IAAhBuD,EACC,OAAOR,EAAoBS,KAAKjC,uBAAa8B,OAE3CI,EAAUV,EAAoBS,KAAKjC,uBAAa8B,OAIlDH,OAAOQ,iBAAiBD,EAAS,KACtB,CACHE,sBACWJ,EAAYnF,IAAIuF,IAAIC,KAAKC,OAEpCC,aAAIC,GACG5F,EAAc4F,EAAON,EAAQpF,QACxBkF,EAAYlF,KACdkF,EAAYlF,KAAKyF,IAAIF,KAAKC,KAAMvF,IAEhCiF,QAAkBH,UAAU3B,aAAamC,KAAKC,KAAM3E,EAAsB6E,GAC1EA,OAAQ/D,SAIDA,IAAV+D,GACDR,EAAYnF,IAAI0F,IAAIF,KAAKC,KAAME,UAGjC,CACJD,aAAIC,OACMC,EAAY7F,EAAcsF,EAAQrF,IAAKqF,EAAQpF,MAAQC,EAAiByF,EAC9ER,EAAYlF,KAAKyF,IAAIF,KAAKC,KAAMG,OAM5CP,EAAQhC,aAAe,SAASwC,EAAMF,GACtB,SAATE,GAA4B,QAATA,EAClBR,EAAQQ,GAAQF,EAEhBR,QAAkBH,UAAU3B,aAAamC,KAAKH,EAASQ,EAAMF,IAEvE,MAAOG,GAELC,QAAQC,KACJ,gDAAkDvD,EAAU,QAAS4C,EAAQrF,IAAK,MAClF,mJAGDqF,GCnDX,IAAMY,EAAsB,IAAIC,OAAO,sBAAuB,eAGvC,sCAAYC,2BAAAA,kBAC5BA,EAAoB9D,OAAS,GAC5B9B,EAASC,UAAY,GACrBD,EAASK,UAAY,KAElBL,EAASC,YACRD,EAASC,UAAYD,EAASC,UAAU4F,OAAO,SAAApE,UAC3CmE,EAAoB1F,MAAM,SAAA4F,SACI,iBAAhBA,GACErE,EAAQrB,KAAK0F,GACjBA,aAAuBH,OACpBlE,EAAQH,aAAewE,EAAYxE,gBADzC,OAKdtB,EAASK,YACRL,EAASK,sBACFL,EAASK,aACTuF,EACEG,IAAI,SAAAD,MACyB,iBAAhBA,EAA0B,KAE1BE,EAAmB,KADNF,EAAYG,QAAQP,EAAqB,QACf,QAC1C1F,EAASK,UAAUH,MAAM,SAAAgG,UAAKA,EAAE5E,aAAe0E,EAAiB1E,oBACxD,IAAIqE,OAAOK,QAEnB,GAAGF,aAAuBH,QAC1B3F,EAASK,UAAUH,MAAM,SAAAgG,UAAKA,EAAE5E,aAAewE,EAAYxE,oBACnDwE,SAGR,OAEVD,OAAOM,qBAOlBC,EAAOxD,SAASyD,wCAAiC1G,mBAAuBY,QACtEiB,EAAI,EAAGA,EAAI4E,EAAKtE,OAAQN,IAAK,KAC3B8E,EAAOF,EAAK5E,GACf3B,EAAgByG,KACfrF,EAAeC,YAAYkB,KAAK,CAACkE,EAAM,2BACvCA,EAAKzC,cAAcE,YAAYuC,QAKnCC,EAAc,IACdtF,EAAeC,aAAasF,QAAQ,WAAe9E,gBAAb4E,OAAM5G,UACzCG,EAAgByG,GAAO,KAChBpE,EAAUoE,EAAKpE,QAAQyC,cACvB8B,EAAc7D,SAASC,cAAcX,GACrCwE,EAAaJ,EAAKvG,aAAaQ,MAEV,UAAvBkG,EAAYvE,QAAqB,KAU5B,IAAIyE,KATLD,EAEAD,EAAY3D,aAAa,MAAO4D,IAGhCD,EAAY3D,aAAa,OAAQpD,GAAQ,0BACzC+G,EAAY3D,aAAa,MAAOwD,EAAK7G,MAGzB6G,EACRK,EAAIC,WAAW,QACfH,EAAYE,GAAOL,EAAKK,IAIhC/D,SAASiE,KAAKC,YAAYL,gBAKtBM,EAAiBnE,SAASyD,iBAAiB,gCACtC7E,EAAI,EAAGA,EAAIuF,EAAejF,OAAQN,KAChC8E,EAAK7G,KAAO6G,EAAKvG,aAAa,cACjCuG,EAAK7G,IAAM6G,EAAKvG,aAAa,aAE7BgH,EAAevF,GAAGzB,aAAa,aAAeuG,EAAK7G,MAEnDsH,EAAevF,GAAGqC,eAAiBkD,EAAevF,GAAGqC,cAAcC,aAAawC,EAAMS,EAAevF,IAErGuF,EAAevF,GAAGqC,eAAiBkD,EAAevF,GAAGqC,cAAcE,YAAYgD,EAAevF,KAM1GP,EAAeC,YAAY8F,OAAOtF,EAAQ6E,EAAa,GACvDA,OAKLvG,EAASC,WAAaD,EAASC,UAAU6B,OAAS,GACjDH,EAASsF"}